{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8b4032e3",
   "metadata": {},
   "source": [
    "# Assignment 5: Convolutional Neural Networks"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9514c4d1",
   "metadata": {},
   "source": [
    "\n",
    "This notebook implements solutions for Assignment 5 using techniques and logic from **Tutorial 7**. \n",
    "The assignment has two parts:\n",
    "- **Part 1:** Building and training a CNN on the CIFAR-10 dataset.\n",
    "- **Part 2:** Modifying the CNN architecture and analyzing its performance.\n",
    "\n",
    "Each question is clearly labeled, and the code is explained step by step.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1b693d17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "using cpu!\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "\n",
    "if torch.cuda.is_available():\n",
    "  device = torch.device('cuda')\n",
    "  print('using gpu!')\n",
    "else:\n",
    "  device = torch.device('cpu')\n",
    "  print('using cpu!')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43af17ec",
   "metadata": {},
   "source": [
    "## Part 1: Training a Convolutional Neural Network"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b4a3d54",
   "metadata": {},
   "source": [
    "### Question 1: Loading and Preprocessing the CIFAR-10 Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d6efe8eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "helllo\n",
      "Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100.0%\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting ./data/cifar-10-python.tar.gz to ./data\n",
      "Files already downloaded and verified\n",
      "Files already downloaded and verified\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torchvision\n",
    "import torchvision.transforms as transforms\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "# --------------------\n",
    "# Part 1: Question 1\n",
    "# --------------------\n",
    "# Define the transforms: convert image to tensor and normalize to range [-1, 1]\n",
    "print(\"helllo\")\n",
    "\n",
    "transform = transforms.Compose([\n",
    "    transforms.ToTensor(),\n",
    "    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))  # Normalize with mean and std of 0.5\n",
    "])\n",
    "\n",
    "batch_size = 4\n",
    "\n",
    "# Load the CIFAR-10 dataset with appropriate split\n",
    "trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n",
    "valset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n",
    "\n",
    "# Split the validation set from the training set\n",
    "trainset, valset = torch.utils.data.random_split(trainset, [40000, 10000])\n",
    "\n",
    "# Create data loaders for train, validation, and test datasets\n",
    "trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=2)\n",
    "valloader = torch.utils.data.DataLoader(valset, batch_size=batch_size, shuffle=False, num_workers=2)\n",
    "testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n",
    "testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=2)\n",
    "\n",
    "classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')\n",
    "print(\"helllo\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0cc1c45",
   "metadata": {},
   "source": [
    "### Question 2: Implementing the CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "792c0f7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Net(\n",
      "  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (fc1): Linear(in_features=400, out_features=120, bias=True)\n",
      "  (fc2): Linear(in_features=120, out_features=84, bias=True)\n",
      "  (fc3): Linear(in_features=84, out_features=10, bias=True)\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "class Net(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Net, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(3, 6, 5)   # First convolutional layer\n",
    "        self.conv2 = nn.Conv2d(6, 16, 5)  # Second convolutional layer\n",
    "        self.fc1 = nn.Linear(16 * 5 * 5, 120)  # First fully connected layer\n",
    "        self.fc2 = nn.Linear(120, 84)         # Second fully connected layer\n",
    "        self.fc3 = nn.Linear(84, 10)          # Output layer (10 classes)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.max_pool2d(F.relu(self.conv1(x)), 2)  # Apply first conv + ReLU + Max pooling\n",
    "        x = F.max_pool2d(F.relu(self.conv2(x)), 2)  # Apply second conv + ReLU + Max pooling\n",
    "        x = torch.flatten(x, 1)  # Flatten the output for the fully connected layers\n",
    "        x = F.relu(self.fc1(x))  # Apply ReLU activation after first fully connected layer\n",
    "        x = F.relu(self.fc2(x))  # Apply ReLU activation after second fully connected layer\n",
    "        x = self.fc3(x)          # Output layer (class probabilities)\n",
    "        return x\n",
    "\n",
    "net = Net()\n",
    "print(net)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bef80d84",
   "metadata": {},
   "source": [
    "### Question 3: Training the CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ee55d3f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [5], Loss: 1.0820\n",
      "Epoch [10], Loss: 0.8416\n",
      "Epoch [15], Loss: 0.7075\n",
      "Epoch [20], Loss: 0.6323\n",
      "Epoch [25], Loss: 0.5903\n",
      "Epoch [30], Loss: 0.5673\n",
      "Epoch [35], Loss: 0.5496\n",
      "Finished Training\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# --------------------\n",
    "# Part 1: Question 3\n",
    "# --------------------\n",
    "criterion = nn.CrossEntropyLoss()  # Cross-entropy loss for multi-class classification\n",
    "optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)  # SGD optimizer\n",
    "\n",
    "num_epochs = 35\n",
    "train_acc = []\n",
    "val_acc = []\n",
    "\n",
    "# Training the model\n",
    "for epoch in range(num_epochs):\n",
    "    net.train()\n",
    "    running_loss = 0.0\n",
    "    correct_train = 0\n",
    "    total_train = 0\n",
    "\n",
    "    for i, data in enumerate(trainloader, 0):\n",
    "        inputs, labels = data\n",
    "        optimizer.zero_grad()  # Clear gradients\n",
    "        outputs = net(inputs)  # Forward pass\n",
    "        loss = criterion(outputs, labels)  # Calculate loss\n",
    "        loss.backward()  # Backpropagation\n",
    "        optimizer.step()  # Update weights\n",
    "\n",
    "        running_loss += loss.item()\n",
    "        _, predicted = torch.max(outputs, 1)\n",
    "        total_train += labels.size(0)\n",
    "        correct_train += (predicted == labels).sum().item()\n",
    "\n",
    "    train_acc.append(100 * correct_train / total_train)\n",
    "\n",
    "    # Validation accuracy after every epoch\n",
    "    net.eval()\n",
    "    correct_val = 0\n",
    "    total_val = 0\n",
    "    with torch.no_grad():\n",
    "        for data in valloader:\n",
    "            images, labels = data\n",
    "            outputs = net(images)\n",
    "            _, predicted = torch.max(outputs, 1)\n",
    "            total_val += labels.size(0)\n",
    "            correct_val += (predicted == labels).sum().item()\n",
    "\n",
    "    val_acc.append(100 * correct_val / total_val)\n",
    "\n",
    "    if epoch % 5 == 4:  # Print loss every 5 epochs\n",
    "        print(f\"Epoch [{epoch+1}], Loss: {running_loss / len(trainloader):.4f}\")\n",
    "\n",
    "print(\"Finished Training\")\n",
    "\n",
    "# Plot training and validation accuracy vs epoch\n",
    "plt.plot(range(num_epochs), train_acc, label='Train Accuracy')\n",
    "plt.plot(range(num_epochs), val_acc, label='Validation Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy (%)')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd12555c",
   "metadata": {},
   "source": [
    "### Question 4: Testing the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d9ae8937",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy for class plane: 59.90%\n",
      "Accuracy for class car: 59.40%\n",
      "Accuracy for class bird: 46.20%\n",
      "Accuracy for class cat: 45.30%\n",
      "Accuracy for class deer: 54.40%\n",
      "Accuracy for class dog: 42.10%\n",
      "Accuracy for class frog: 65.40%\n",
      "Accuracy for class horse: 55.70%\n",
      "Accuracy for class ship: 67.20%\n",
      "Accuracy for class truck: 69.00%\n"
     ]
    }
   ],
   "source": [
    "# Set the model to evaluation mode\n",
    "net.eval()\n",
    "\n",
    "correct = [0] * 10  # List to store correct predictions for each class\n",
    "total = [0] * 10    # List to store total samples for each class\n",
    "\n",
    "# Calculate accuracy for each class\n",
    "with torch.no_grad():\n",
    "    for data in testloader:\n",
    "        images, labels = data\n",
    "        outputs = net(images)\n",
    "        _, predicted = torch.max(outputs, 1)\n",
    "\n",
    "        # Update correct and total counts per class\n",
    "        for i in range(len(labels)):\n",
    "            label = labels[i].item()\n",
    "            correct[label] += (predicted[i] == label).item()\n",
    "            total[label] += 1\n",
    "\n",
    "# Output the accuracy per class\n",
    "for i in range(10):  # Since CIFAR-10 has 10 classes\n",
    "    if total[i] > 0:\n",
    "        accuracy = 100 * correct[i] / total[i]\n",
    "        print(f\"Accuracy for class {classes[i]}: {accuracy:.2f}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5421699",
   "metadata": {},
   "source": [
    "# Part 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fb9dd76",
   "metadata": {},
   "source": [
    "## 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca3e02d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --------------------\n",
    "# Part 2: Question 1\n",
    "# --------------------\n",
    "# Define the modified CNN model by removing the last fully connected layer\n",
    "class NetWithoutFC(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(NetWithoutFC, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(3, 6, 5)   # First convolutional layer\n",
    "        self.conv2 = nn.Conv2d(6, 16, 5)  # Second convolutional layer\n",
    "        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n",
    "        self.fc2 = nn.Linear(120, 84)\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))\n",
    "        x = F.max_pool2d(F.relu(self.conv2(x)), (2, 2))\n",
    "        x = torch.flatten(x, 1)\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = F.relu(self.fc2(x))\n",
    "        return x  # No output layer\n",
    "\n",
    "# Instantiate and train the modified model\n",
    "model_without_fc = NetWithoutFC()\n",
    "print(model_without_fc)\n",
    "\n",
    "# Train the model (using the same training loop as in Part 1)\n",
    "optimizer = optim.SGD(model_without_fc.parameters(), lr=0.001, momentum=0.9)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9437960f",
   "metadata": {},
   "source": [
    "## 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "081134eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --------------------\n",
    "# Part 2: Question 2\n",
    "# --------------------\n",
    "# Define the modified CNN model with more neurons in the first fully connected layer\n",
    "class NetWithMoreNeurons(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(NetWithMoreNeurons, self).__init__()\n",
    "        self.conv1 = nn.Conv2d(3, 6, 5)   # First convolutional layer\n",
    "        self.conv2 = nn.Conv2d(6, 16, 5)  # Second convolutional layer\n",
    "        self.fc1 = nn.Linear(16 * 5 * 5, 1000)  # Increase neurons in the first FC layer\n",
    "        self.fc2 = nn.Linear(1000, 84)          # Second FC layer\n",
    "        self.fc3 = nn.Linear(84, 10)            # Output layer\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))\n",
    "        x = F.max_pool2d(F.relu(self.conv2(x)), (2, 2))\n",
    "        x = torch.flatten(x, 1)\n",
    "        x = F.relu(self.fc1(x))\n",
    "        x = F.relu(self.fc2(x))\n",
    "        x = self.fc3(x)\n",
    "        return x\n",
    "\n",
    "# Instantiate and train the modified model\n",
    "model_with_more_neurons = NetWithMoreNeurons()\n",
    "print(model_with_more_neurons)\n",
    "\n",
    "# Train the model (using the same training loop as in Part 1)\n",
    "optimizer = optim.SGD(model_with_more_neurons.parameters(), lr=0.001, momentum=0.9)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
